# Valgrind suppressions file for GJS
# This is intended to be used in addition to GLib's glib.supp file.

# We leak a small wrapper in GJS for each registered GType.

{
   gtype-wrapper-new
   Memcheck:Leak
   match-leak-kinds: definite
   fun:_Znwm
   fun:gjs_gtype_create_gtype_wrapper
}

{
   gtype-wrapper-qdata
   Memcheck:Leak
   match-leak-kinds: possible
   ...
   fun:type_set_qdata_W
   fun:g_type_set_qdata
   fun:gjs_gtype_create_gtype_wrapper
}

{
   g_type_register_fundamental never freed
   Memcheck:Leak
   fun:calloc
   ...
   fun:g_type_register_fundamental
   ...
}

# SpiderMonkey leaks

{
   mozjs-thread-stack-init
   Memcheck:Leak
   match-leak-kinds: possible
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls
   fun:allocate_stack
   fun:pthread_create@@GLIBC_2.2.5
   fun:_ZN7mozilla9TimeStamp20ComputeProcessUptimeEv
   fun:_ZN7mozilla9TimeStamp15ProcessCreationERb
   fun:_ZN2JS6detail25InitWithFailureDiagnosticEb
   fun:JS_Init
}

{
   mozjs-thread-stack-new-context
   Memcheck:Leak
   match-leak-kinds: possible
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls
   fun:allocate_stack
   fun:pthread_create@@GLIBC_2.2.5
   fun:_ZN2js6Thread6createEPFPvS1_ES1_
   fun:init<void (&)(void*), js::HelperThread*>
   fun:_ZN2js23GlobalHelperThreadState17ensureInitializedEv
   fun:_ZN9JSRuntime4initEjj
   fun:init
   fun:NewContext
   fun:_Z13JS_NewContextjjP9JSContext
}

{
   mozjs-gc-helper-thread-mutex-guard
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:js_malloc
   fun:js_new<mozilla::Vector<const js::Mutex*> >
   fun:_ZN2js5Mutex14heldMutexStackEv.part.293
   fun:heldMutexStack
   fun:_ZN2js5Mutex4lockEv
   fun:LockGuard
   fun:_ZN2js25AutoLockHelperThreadStateC1EON7mozilla6detail19GuardObjectNotifierE
   fun:_ZN2js12HelperThread10threadLoopEv
   fun:callMain<0ul>
   fun:_ZN2js6detail16ThreadTrampolineIRFvPvEJPNS_12HelperThreadEEE5StartES2_
   fun:start_thread
   fun:clone
}


# SpiderMonkey data races

# These are in SpiderMonkey's atomics / thread barrier stuff so presumably
# locking is working correctly and helgrind just can't detect it?

{
   mozjs-helgrind-atomic-load-1
   Helgrind:Race
   fun:load
   fun:load
   fun:operator unsigned int
}

{
   mozjs-helgrind-atomic-load-2
   Helgrind:Race
   fun:load
   fun:load
   fun:operator bool
}

{
   mozjs-helgrind-atomic-store
   Helgrind:Race
   fun:store
   fun:store
   fun:operator=
}

# Presumably this one is OK since the function is called "thread safe"?!
{
   mozjs-helgrind-thread-safe-lookup
   Helgrind:Race
   ...
   fun:lookup
   fun:readonlyThreadsafeLookup
   fun:readonlyThreadsafeLookup
}

{
   mozjs-helgrind-jit-code
   Helgrind:Race
   obj:*
   ...
   fun:_ZL13EnterBaselineP9JSContextRN2js3jit12EnterJitDataE
}

{
   mozjs-helgrind-probably-jit-code
   Helgrind:Race
   obj:*
   obj:*
   obj:*
   obj:*
   obj:*
}
